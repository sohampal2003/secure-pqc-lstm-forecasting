version: '3.8'

services:
  # Streamlit Dashboard
  streamlit-dashboard:
    build: .
    container_name: time-series-forecasting-dashboard
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
    volumes:
      - ./data:/app/data
      - ./models:/app/models
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - forecasting-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: forecasting-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - forecasting-network

  # PostgreSQL for storing historical data and forecasts
  postgres:
    image: postgres:15-alpine
    container_name: forecasting-postgres
    environment:
      POSTGRES_DB: forecasting_db
      POSTGRES_USER: forecasting_user
      POSTGRES_PASSWORD: forecasting_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - forecasting-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: forecasting-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - streamlit-dashboard
    restart: unless-stopped
    networks:
      - forecasting-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: forecasting-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - forecasting-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: forecasting-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - forecasting-network

  # Celery worker for background tasks
  celery-worker:
    build: .
    container_name: forecasting-celery-worker
    command: celery -A tasks worker --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://forecasting_user:forecasting_password@postgres:5432/forecasting_db
    volumes:
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - forecasting-network

  # Celery beat for scheduled tasks
  celery-beat:
    build: .
    container_name: forecasting-celery-beat
    command: celery -A tasks beat --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://forecasting_user:forecasting_password@postgres:5432/forecasting_db
    volumes:
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - forecasting-network

  # Flower for Celery monitoring
  flower:
    build: .
    container_name: forecasting-flower
    command: celery -A tasks flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped
    networks:
      - forecasting-network

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  forecasting-network:
    driver: bridge
